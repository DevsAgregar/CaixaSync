---
description: 
globs: 
alwaysApply: true
---
# Tratamento de Erros TypeScript

## Regras Fundamentais
1. **Nunca ignore erros sem documentação**
   - Proibido usar `@ts-ignore` sem comentário explicativo
   - Proibido usar `@ts-expect-error` sem justificativa
   - Proibido usar `// @ts-nocheck` em arquivos

2. **Warnings são Erros**
   - Trate todos os warnings como erros
   - Configure o TypeScript para falhar em warnings
   - Não ignore warnings de compilação

## Formato de Documentação de Ignorados
```typescript
// Exemplo de documentação adequada
// @ts-ignore: Ignorando erro de tipo devido à incompatibilidade
// entre a versão antiga da biblioteca e as definições de tipo atuais.
// TODO: Atualizar para versão mais recente da biblioteca em Q2/2024
const resultado = bibliotecaAntiga.funcao();
```

## Boas Práticas
1. **Alternativas ao Ignorar**
   - Use type assertions quando apropriado
   - Implemente type guards
   - Atualize definições de tipo
   - Refatore o código para satisfazer o sistema de tipos

2. **Documentação Obrigatória**
   - Motivo do ignore
   - Plano de resolução
   - Data estimada de correção
   - Impacto da ignorância do erro

3. **Configuração do TypeScript**
   ```json
   {
     "compilerOptions": {
       "noImplicitAny": true,
       "strictNullChecks": true,
       "noUnusedLocals": true,
       "noUnusedParameters": true,
       "noImplicitReturns": true,
       "noFallthroughCasesInSwitch": true,
       "forceConsistentCasingInFileNames": true
     }
   }
   ```

## Exemplos de Tratamento Adequado

### 1. Type Assertion
```typescript
// Bom
const elemento = document.getElementById('root') as HTMLElement;

// Ruim
// @ts-ignore
const elemento = document.getElementById('root');
```

### 2. Type Guard
```typescript
// Bom
function isUser(obj: any): obj is User {
  return obj && typeof obj.name === 'string';
}

// Ruim
// @ts-ignore
function processUser(user) {
  console.log(user.name);
}
```

### 3. Atualização de Tipos
```typescript
// Bom
interface User {
  id: number;
  name: string;
  email: string;
}

// Ruim
// @ts-ignore
const user = { id: 1, name: 'John' };
```

## Processo de Revisão
1. Identificar a causa raiz do erro
2. Documentar o motivo do ignore (se necessário)
3. Criar ticket para resolução futura
4. Adicionar testes para garantir comportamento esperado
5. Revisar periodicamente os ignores pendentes

## Benefícios
- Código mais seguro e previsível
- Melhor manutenibilidade
- Documentação clara de decisões técnicas
- Facilita a identificação de problemas potenciais
- Promove boas práticas de tipagem

